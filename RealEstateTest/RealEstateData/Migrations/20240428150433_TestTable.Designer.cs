// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstateData;

#nullable disable

namespace RealEstate.Data.Migrations
{
    [DbContext(typeof(DBData))]
    [Migration("20240428150433_TestTable")]
    partial class TestTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RealEstate.Core.Balconys", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("balconys")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Balconys");
                });

            modelBuilder.Entity("RealEstate.Core.Bathrooms", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("bathrooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Bathrooms");
                });

            modelBuilder.Entity("RealEstate.Core.Bedrooms", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("bedrooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Bedrooms");
                });

            modelBuilder.Entity("RealEstate.Core.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Number")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("RealEstate.Core.furnishedstatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Furnishedstatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("furnishedstatus");
                });

            modelBuilder.Entity("RealEstate.Core.offertype", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Offertype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("offertype");
                });

            modelBuilder.Entity("RealEstate.Core.propertystatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Propertystatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("propertystatus");
                });

            modelBuilder.Entity("RealEstate.Core.propertytype", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Propertytype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("propertytype");
                });

            modelBuilder.Entity("RealEstate.Core.RealEstateProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FurnishedstatusId")
                        .HasColumnType("int");

                    b.Property<string>("FurnishedstatusList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImagesCounts")
                        .HasColumnType("int");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<int>("OffertypeId")
                        .HasColumnType("int");

                    b.Property<string>("OffertypeLiist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertystatusId")
                        .HasColumnType("int");

                    b.Property<string>("PropertystatusList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertytypeId")
                        .HasColumnType("int");

                    b.Property<string>("PropertytypeList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("balconysId")
                        .HasColumnType("int");

                    b.Property<string>("balconysList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bathroomsId")
                        .HasColumnType("int");

                    b.Property<string>("bathroomsList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bedroomsId")
                        .HasColumnType("int");

                    b.Property<string>("bedroomsList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("carpetarea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("depositamount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("floorroom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propertyaddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propertyage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propertydescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propertyname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propertyprice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("totalfloors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FurnishedstatusId");

                    b.HasIndex("OffertypeId");

                    b.HasIndex("PropertystatusId");

                    b.HasIndex("PropertytypeId");

                    b.HasIndex("balconysId");

                    b.HasIndex("bathroomsId");

                    b.HasIndex("bedroomsId");

                    b.ToTable("RealEstateProperty");
                });

            modelBuilder.Entity("RealEstate.Core.SavedProp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("savedProps");
                });

            modelBuilder.Entity("RealEstate.Core.RealEstateProperty", b =>
                {
                    b.HasOne("RealEstate.Core.furnishedstatus", "Furnishedstatus")
                        .WithMany("RealEstateProperties")
                        .HasForeignKey("FurnishedstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Core.offertype", "Offertype")
                        .WithMany("RealEstateProperties")
                        .HasForeignKey("OffertypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Core.propertystatus", "Propertystatus")
                        .WithMany("RealEstateProperties")
                        .HasForeignKey("PropertystatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Core.propertytype", "Propertytype")
                        .WithMany("RealEstateProperties")
                        .HasForeignKey("PropertytypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Core.Balconys", "balconys")
                        .WithMany("RealEstateProperties")
                        .HasForeignKey("balconysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Core.Bathrooms", "bathrooms")
                        .WithMany("RealEstateProperties")
                        .HasForeignKey("bathroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Core.Bedrooms", "bedrooms")
                        .WithMany("RealEstateProperties")
                        .HasForeignKey("bedroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Furnishedstatus");

                    b.Navigation("Offertype");

                    b.Navigation("Propertystatus");

                    b.Navigation("Propertytype");

                    b.Navigation("balconys");

                    b.Navigation("bathrooms");

                    b.Navigation("bedrooms");
                });

            modelBuilder.Entity("RealEstate.Core.SavedProp", b =>
                {
                    b.HasOne("RealEstate.Core.RealEstateProperty", "Post")
                        .WithMany("SavedByUsers")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("RealEstate.Core.Balconys", b =>
                {
                    b.Navigation("RealEstateProperties");
                });

            modelBuilder.Entity("RealEstate.Core.Bathrooms", b =>
                {
                    b.Navigation("RealEstateProperties");
                });

            modelBuilder.Entity("RealEstate.Core.Bedrooms", b =>
                {
                    b.Navigation("RealEstateProperties");
                });

            modelBuilder.Entity("RealEstate.Core.furnishedstatus", b =>
                {
                    b.Navigation("RealEstateProperties");
                });

            modelBuilder.Entity("RealEstate.Core.offertype", b =>
                {
                    b.Navigation("RealEstateProperties");
                });

            modelBuilder.Entity("RealEstate.Core.propertystatus", b =>
                {
                    b.Navigation("RealEstateProperties");
                });

            modelBuilder.Entity("RealEstate.Core.propertytype", b =>
                {
                    b.Navigation("RealEstateProperties");
                });

            modelBuilder.Entity("RealEstate.Core.RealEstateProperty", b =>
                {
                    b.Navigation("SavedByUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
