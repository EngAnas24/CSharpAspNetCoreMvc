@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService authoriz

@{
    AuthorizationResult authorizationResult = await authoriz.AuthorizeAsync(User, "Admin");
}

@model IEnumerable<RealEstate.Core.RealEstateProperty>

<style>
    .table-container {
        margin: 0 auto;
        width: 90%; /* Set table width to 90% of screen width */
    }

    table {
        margin: 0 auto;
        width: 100%; /* Make table width full */
        direction: ltr; /* Text direction left to right */
    }

    .pagination-container {
        text-align: center; /* Center align pagination controls */
    }
</style>
<br>
<br>
<br>
<br>
<br>

@if (!Model.Any())
{
    <h1><center style="color: whitesmoke;">No Posts</center></h1>
}
else
{
    <div class="table-container">
        <table>
            <tbody>
                @for (var i = 0; i < Model.Count(); i += 3)
                {
                    <tr>
                        @foreach (var property in Model.Skip(i).Take(3))
                        {
                            <td style="padding: 10px; text-align: left;">
                                <section class="my-listings">
                                    <div class="box-container">
                                        <form asp-action="Update" method="post" class="box">
                                            <input type="hidden" name="property_id" value="@property.Id" />
                                            <div class="thumb">
                                                <p>
                                                    <i class="far fa-image"></i> <span>@property.ImagesCounts</span>
                                                </p>                                
                                                <img src="~/uploads/@property.ImageUrl1" alt="" />
                                            </div>
                                            <div class="price">
                                                <i class="fa-solid fa-dollar-sign"></i>
                                                <span>@property.propertyprice</span>
                                            </div>
                                            <h3 class="name">@property.totalfloors</h3>
                                            <p class="address">
                                                <i class="fas fa-map-marker-alt"></i>
                                                <span>@property.propertyaddress</span>
                                            </p>
                                            <div class="flex-btn">
                                                <a asp-action="Edit" asp-route-id="@property.Id" class="btn">Update</a>
                                                <a asp-action="DeleteMyPosts" asp-route-id="@property.Id" class="btn">Delete</a>
                                            </div>
                                            <a asp-action="Details" asp-route-id="@property.Id" class="btn">View Property</a>
                                        </form>
                                    </div>
                                </section>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@{
    int itemsPerPage = 4 * 3; // 4 rows * 3 columns = 12 items per page
    int currentPage = 1; // Default to page 1 if Model is empty

    if (Model.Any())
    {
        currentPage = (int)Math.Ceiling((double)Model.Max(p => p.Id) / itemsPerPage);
    }

    int? lastPostId = Model.Any() ? Model.Max(p => p.Id) : (int?)null;
    int totalPages = (int)Math.Ceiling((double)Model.Count() / itemsPerPage);
    bool isFirstPage = currentPage == 1;
    bool isLastPage = Model.Count() < itemsPerPage;
}

<div class="pagination-container p-3 mt-3 mt-md-5">
    <div class="pagination">
        @if (!isFirstPage)
        {
            int previousPage = currentPage - 1;
            <a asp-action="MyPosts" asp-route-id="@previousPage" class="nav-link text-white">
                <button class="btn btn-primary mr-2 mb-2 mb-md-0 btn-transparent text-white">Previous</button>
            </a>
        }

        @for (int i = 1; i <= totalPages; i++)
        {
            <a asp-action="MyPosts" asp-route-id="@i" class="nav-link text-white">
                <button class="btn btn-primary mr-2 mb-2 mb-md-0 btn-transparent text-white">@i</button>
            </a>
        }

        @if (!isLastPage && lastPostId.HasValue)
        {
            int nextPage = lastPostId.Value + 1;
            <a asp-action="MyPosts" asp-route-id="@nextPage" class="nav-link text-white">
                <button class="btn btn-primary mr-2 mb-2 mb-md-0 btn-transparent text-white">Next</button>
            </a>
        }
    </div>
</div>
